package com.example.demo;

import com.example.demo.config.DatabaseProperties;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
public class StartupRunner implements CommandLineRunner {
    private final JdbcTemplate jdbc;
    private final DatabaseProperties props;
    private final Environment env;

    public StartupRunner(JdbcTemplate jdbc, DatabaseProperties props, Environment env) {
        this.jdbc = jdbc;
        this.props = props;
        this.env = env;
    }

    @Override
    public void run(String... args) {
        String[] profiles = env.getActiveProfiles();
        System.out.println("Active profiles: " + String.join(",", profiles));
        System.out.println("DB vendor: " + props.getVendor());

        try {
            jdbc.execute("""
            CREATE TABLE IF NOT EXISTS customers (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR(100) NOT NULL
            )
        """);

            Integer count = jdbc.queryForObject("SELECT COUNT(*) FROM customers", Integer.class);
            if (count != null && count == 0) {
                jdbc.update("INSERT INTO customers(name) VALUES (?)", "Alice");
                jdbc.update("INSERT INTO customers(name) VALUES (?)", "Bob");
            }

            var names = jdbc.query("SELECT name FROM customers ORDER BY id",
                    (rs, i) -> rs.getString("name"));
            System.out.println("Customers: " + names);
        } catch (Exception e) {
            System.out.println("Startup DB initialization failed: " + e.getMessage());
        }
    }

}
